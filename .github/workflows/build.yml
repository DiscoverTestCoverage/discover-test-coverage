# Basic workflow
name: build

# Controls when the action will run
# Workflow begins with push or PR events
# Focuses on the master branch only
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# Create one single job
# This job performs all necessary checks
jobs:
  build:
    # Use the latest version of Ubuntu
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Performs all actions on different versions of Python
        python-version: ["3.8", "3.9", "3.10"]
    # Define the workflow steps
    steps:
    # Checkout the code of the repository
        - name: Check out Repository Code
          uses: actions/checkout@v2
          with:
            fetch-depth: 0
        # Run the mdl linting tool
        # Refers to .mdlrc file in repository
        - name: Run Markdown Linting
          uses: actionshub/markdownlint@main
        # Setup Python for the current language version
        - name: Setup Python ${{ matrix.python-version }}
          uses: actions/setup-python@v1
          with:
            python-version: ${{ matrix.python-version }}
        # Install pip
        - name: Install Pip
          run: |
            pip install -U pip
        # Install poetry
        - name: Install Poetry
          uses: abatilo/actions-poetry@v2.0.0
          with:
            poetry-version: 1.1.14
        # Install all of the dependencies
        - name: Install all dependencies
          run: |
            poetry install
        # Run the black code formatter in checking mode
        - name: Run Black Code Formatter
          run: |
            poetry run task black
        # Run the flake8 linting tool
        - name: Run Flake8 Linting Tool
          run: |
            poetry run task flake8
        # Run the pydocstyle linting tool
        - name: Run Pydocstyle Linting Tool
          run: |
            poetry run task pydocstyle
        # Run the pylint linting tool
        - name: Run Pylint Linting Tool
          run: |
            poetry run task pylint
        # Run the test suite and collect coverage
        - name: Run the Test Suite
          run: |
            poetry run task test
        # Create a coverage report
        - name: Install everything, run the tests, produce a .coverage.xxx file
          run: poetry run task coverage-report
          env:
            COVERAGE_FILE: ".coverage.${{ matrix.python_version }}"
        # Store the coverage file
        - name: Store coverage file
          uses: actions/upload-artifact@v2
          with:
            name: coverage
            path: .coverage.${{ matrix.python_version }}

  # Create a coverage report and create the badge
  coverage:
      name: Coverage
      runs-on: ubuntu-latest
      needs: build
      steps:
        - uses: actions/checkout@v2
        - uses: actions/download-artifact@v2
          id: download
          with:
            name: 'coverage'
        - name: Coverage comment
          id: coverage_comment
          uses: ewjoachim/python-coverage-comment-action@v2
          with:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            MERGE_COVERAGE_FILES: true
        - name: Store Pull Request comment to be posted
          uses: actions/upload-artifact@v2
          if: steps.coverage_comment.outputs.COMMENT_FILE_WRITTEN == 'true'
          with:
            name: python-coverage-comment-action
            path: python-coverage-comment-action.txt
